generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================== MODELS ===================

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  services      Service[]
  biddings      Bidding[]
  tasks         Task[]
  emails        Email[]
  notifications Notification[]
  points        Int             @default(0)
  level         Int             @default(1)
  claimedRewards RewardClaim[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Service {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  category    String?
  image       String?
  emerges     Boolean  @default(false)

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  biddings    Bidding[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bidding {
  id        Int      @id @default(autoincrement())
  amount    Float

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId Int

  createdAt DateTime @default(now())
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  isComplete  Boolean  @default(false)

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Email {
  id        Int      @id @default(autoincrement())
  to        String
  subject   String
  message   String
  sentAt    DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  isRead    Boolean  @default(false)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reward {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  pointsCost  Int
  claimedBy   RewardClaim[]
  
  createdAt   DateTime @default(now())
}

model RewardClaim {
  id        Int      @id @default(autoincrement())

  reward    Reward   @relation(fields: [rewardId], references: [id])
  rewardId  Int

  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  createdAt DateTime @default(now())
}

model Admin {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  role        String   // 'superadmin' or 'admin'
  permissions Json     // Permissions object

  createdAt   DateTime @default(now())
}

model Settings {
  id                    Int      @id @default(1)
  email                 String
  notificationsEnabled  Boolean  @default(true)
  appName               String
  googleMapsApiKey      String
  firebaseConfig        Json

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
