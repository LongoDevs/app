generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  password       String
  points         Int            @default(0)
  level          Int            @default(1)
  ratings_count  Int            @default(0) // ðŸ‘ˆ Add this
  average_rating Float          @default(0) // ðŸ‘ˆ Add this
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  biddings       Bidding[]
  emails         Email[]
  notifications  Notification[]
  claimedRewards RewardClaim[]
  services       Service[]
  tasks          Task[]
}

model Reward {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  pointsCost  Int
  createdAt   DateTime      @default(now())
  claimedBy   RewardClaim[]
}

model RewardClaim {
  id        Int      @id @default(autoincrement())
  rewardId  Int
  userId    Int
  createdAt DateTime @default(now())
  reward    Reward   @relation(fields: [rewardId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Service {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  price       Float
  category    String?
  image       String?
  emerges     Boolean   @default(false)
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  biddings    Bidding[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bidding {
  id        Int      @id @default(autoincrement())
  amount    Float
  userId    Int
  serviceId Int
  createdAt DateTime @default(now())
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  isComplete  Boolean  @default(false)
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Email {
  id      Int      @id @default(autoincrement())
  to      String
  subject String
  message String
  sentAt  DateTime @default(now())
  userId  Int?
  user    User?    @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  isRead    Boolean  @default(false)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Admin {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  role        String
  permissions Json
  createdAt   DateTime @default(now())
}
